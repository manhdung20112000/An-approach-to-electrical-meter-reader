  0%|          | 0/10 [00:00<?, ?it/s]  0%|          | 0/10 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/train.py", line 39, in <module>
    main()
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/train.py", line 33, in main
    cv_train_classifier(model=classifier, dataset=dataset['train'], epochs=10, device=device, criterion=criterion)
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/classifier.py", line 118, in cv_train_classifier
    train(model=model, fold=fold, dataloader=dataloader, criterion=criterion, epochs=epochs, optim=optimizer, device=device)
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/utils.py", line 121, in train
    train_losses.append(epochTrain())
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/utils.py", line 69, in epochTrain
    pred = model(data)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/classifier.py", line 85, in forward
    x = self.net(x)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/container.py", line 119, in forward
    input = module(input)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/activation.py", line 102, in forward
    return F.relu(input, inplace=self.inplace)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/functional.py", line 1206, in relu
    result = torch.relu(input)
RuntimeError: CUDA out of memory. Tried to allocate 172.00 MiB (GPU 0; 1.96 GiB total capacity; 197.69 MiB already allocated; 119.38 MiB free; 212.00 MiB reserved in total by PyTorch)
