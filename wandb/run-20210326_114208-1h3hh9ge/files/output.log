  0%|          | 0/100 [00:00<?, ?it/s]  0%|          | 0/100 [00:01<?, ?it/s]
Traceback (most recent call last):
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/train.py", line 35, in <module>
    main()
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/train.py", line 32, in main
    train_classifier(dataset=dataset)
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/classifier.py", line 201, in train_classifier
    train_eval(model=model, dataloader=dataloader, criterion=criterion, epochs=epochs, optim=optimizer, device=device)
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/utils.py", line 130, in train_eval
    train_losses.append(train(model=model, device=device, criterion=criterion, dataloader=dataloader, optim=optim))
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/utils.py", line 77, in train
    pred = model(data)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/manhdung/Workplace/An-approach-to-electrical-meter-reader/model/classifier.py", line 85, in forward
    x = self.net(x)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/container.py", line 119, in forward
    input = module(input)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/modules/pooling.py", line 162, in forward
    return F.max_pool2d(input, self.kernel_size, self.stride,
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/_jit_internal.py", line 365, in fn
    return if_false(*args, **kwargs)
  File "/home/manhdung/miniconda3/envs/machine-learning/lib/python3.9/site-packages/torch/nn/functional.py", line 659, in _max_pool2d
    return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)
RuntimeError: CUDA out of memory. Tried to allocate 194.00 MiB (GPU 0; 1.96 GiB total capacity; 914.22 MiB already allocated; 201.56 MiB free; 930.00 MiB reserved in total by PyTorch)
